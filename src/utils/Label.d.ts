import { Scene } from "@babylonjs/core/scene";
import { ArcRotateCamera } from "@babylonjs/core/Cameras/arcRotateCamera";
import { Vector3 } from "@babylonjs/core/Maths/math";
import { AdvancedDynamicTexture } from "@babylonjs/gui/2D/advancedDynamicTexture";
import { TransformNode } from "@babylonjs/core/Meshes/transformNode";
import { Plot } from "./Plot";
declare class dpInfo {
    private _background;
    private _textBlock;
    private _text;
    private _bgColor;
    private _txtColor;
    private _uiLayer;
    private _closeBtn;
    target: TransformNode;
    disposed: boolean;
    constructor(text: string, target: TransformNode, uiLayer: AdvancedDynamicTexture, backgroundColor: string, color: string);
    draw(): void;
    dispose(): void;
}
declare class Label {
    private _label;
    private _background;
    private _text;
    size: number;
    color: string;
    fixed: boolean;
    plotCreated: Plot;
    constructor(text: string, position: Vector3, scene: Scene, color?: string, size?: number, plotCreated?: Plot);
    setText(text: string): void;
    update(camera: ArcRotateCamera, scene: Scene): void;
    fix(): void;
    unfix(): void;
    dispose(): void;
    export(): [number, number, number, string, string, number];
}
export declare class AnnotationManager {
    private _canvas;
    private _scene;
    private _ymax;
    private _camera;
    private _labelControlBox;
    private _editLabelContainer;
    private _editLabelForms;
    private _addLabelTextInput;
    private _showLabels;
    private _showArrows;
    private _bgColor;
    private _fgColor;
    private _fullScreenUI;
    private _uniqID;
    dpInfos: dpInfo[];
    labels: Label[];
    fixedLabels: boolean;
    fixedArrows: boolean;
    constructor(canvas: HTMLCanvasElement, scene: Scene, ymax: number, camera: ArcRotateCamera, backgroundColor: string, fullScreenUI: AdvancedDynamicTexture, uniqID: string);
    private _createLabelForms;
    update(): void;
    toggleLabelControl(): void;
    private _addLabelBtnClick;
    redrawInfo(): void;
    displayInfo(text: string, target: TransformNode): void;
    clearInfo(): void;
    addLabel(text: string, position?: number[], color?: string, size?: number, plotCreated?: Plot): number;
    addLabels(labelList: [number, number, number, string, string?, number?][]): number[];
    private _editLabelText;
    private _removeLabelByUI;
    removeLabel(index: number): void;
    exportLabels(): [number, number, number, string, string, number][];
    fixLabels(): void;
    unfixLabels(): void;
}
export {};
